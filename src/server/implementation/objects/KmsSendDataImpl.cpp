/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <KmsSendDataImplFactory.hpp>
#include "KmsSendDataImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_kms_send_data_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoKmsSendDataImpl"

#define FACTORY_NAME "kmssenddata"

namespace kurento
{
namespace module
{
namespace datachannelexample
{

void KmsSendDataImpl::postConstructor ()
{
  MediaElementImpl::postConstructor ();

  g_signal_emit_by_name (element, "configure_bus_watcher");
}

KmsSendDataImpl::KmsSendDataImpl (const boost::property_tree::ptree &config,
                                  std::shared_ptr<MediaPipeline> mediaPipeline) :
  MediaElementImpl (config,
                    std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline),
                    FACTORY_NAME)
{
}

MediaObjectImpl *
KmsSendDataImplFactory::createObject (const boost::property_tree::ptree &config,
                                      std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new KmsSendDataImpl (config, mediaPipeline);
}

KmsSendDataImpl::StaticConstructor KmsSendDataImpl::staticConstructor;

KmsSendDataImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* datachannelexample */
} /* module */
} /* kurento */
