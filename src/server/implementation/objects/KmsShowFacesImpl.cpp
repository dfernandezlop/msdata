/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <KmsShowFacesImplFactory.hpp>
#include "KmsShowFacesImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_kms_show_faces_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoKmsShowFacesImpl"

namespace kurento
{
namespace module
{
namespace datachannelexample
{

KmsShowFacesImpl::KmsShowFacesImpl (const boost::property_tree::ptree &config,
                                    std::shared_ptr<MediaPipeline> mediaPipeline) :
  FilterImpl (config,
              std::dynamic_pointer_cast<MediaObjectImpl> ( mediaPipeline) )
{
  g_object_set (element, "filter-factory", "imageoverlaymetadata", NULL);

  g_object_get (G_OBJECT (element), "filter", &imageOverlay, NULL);

  if (imageOverlay == NULL) {
    throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
                            "Media Object ShowFaces not available");
  }

  g_object_unref (imageOverlay);
}

MediaObjectImpl *
KmsShowFacesImplFactory::createObject (const boost::property_tree::ptree
                                       &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new KmsShowFacesImpl (config, mediaPipeline);
}

KmsShowFacesImpl::StaticConstructor KmsShowFacesImpl::staticConstructor;

KmsShowFacesImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}


  void KmsShowFacesImpl::setVisualisation (int visualisationId){
    GstStructure *id;
    id = gst_structure_new ("visid",
				 "id", G_TYPE_INT, int (visualisationId),
				 NULL);
    g_object_set (G_OBJECT (imageOverlay), "visid", id, NULL);
    gst_structure_free (id);
  }

  
  void KmsShowFacesImpl::setVisualisationArea (int x, int y, int width, int height){

    GstStructure *area;
    area = gst_structure_new ("area",
				 "x", G_TYPE_INT, int (x),
				 "y", G_TYPE_INT, int (y),
				 "width", G_TYPE_INT, int (width),
				 "height", G_TYPE_INT, int (height),
				 NULL);
    g_object_set (G_OBJECT (imageOverlay), "visarea", area, NULL);
    gst_structure_free (area);
  }
  
} /* datachannelexample */
} /* module */
} /* kurento */
